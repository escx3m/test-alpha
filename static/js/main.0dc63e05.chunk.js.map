{"version":3,"sources":["itemSlice.js","Card.js","Filter.js","App.js","store.js","reportWebVitals.js","index.js"],"names":["PROXY_URL","itemSlice","createSlice","name","initialState","value","like","loading","reducers","liked","state","action","id","payload","length","hasOwnProperty","isLiked","remove","slice","setData","toggleLike","actions","selectValue","allData","selectLike","selectLoading","CardGrid","dogs","useSelector","dispatch","useDispatch","likeState","useEffect","Row","xs","md","lg","className","map","item","idx","cardRender","Col","Card","Img","variant","src","img","OverlayTrigger","overlay","Tooltip","onClick","Body","Title","anime","Text","quote","FilterImage","unFilter","onFilter","Badge","pill","bg","e","target","classList","add","App","loadingData","Container","Spinner","animation","role","Filter","configureStore","reducer","itemReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","image","axios","method","url","responseImage","responseText","result","data","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc63e05.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\n\r\n\r\nconst getText = 'https://animechan.vercel.app/api/quotes';\r\nconst getImage = 'http://shibe.online/api/shibes?count=10&urls=true&httpsUrls=true';\r\nconst PROXY_URL = 'https://thingproxy.freeboard.io/fetch/'; // url proxy для локального разворота\r\n\r\n\r\nexport const itemSlice = createSlice({\r\n    name: 'allData',\r\n    initialState: {\r\n        value: [],\r\n        like: false,\r\n        loading: true\r\n    },\r\n    reducers: {\r\n        liked: (state, action) => {\r\n            const id = action.payload;\r\n            if (state.value.length && state.value[id].hasOwnProperty(\"isLiked\")) {\r\n                state.value[id].isLiked = !state.value[id].isLiked;\r\n            }\r\n        },\r\n        remove: (state, action) => {\r\n            const id = action.payload;\r\n            return { ...state, value: [...state.value.slice(0, id), ...state.value.slice(id + 1)] };\r\n        },\r\n        setData: (state, action) => ({ ...state, value: [...state.value, ...action.payload], loading: false }),\r\n        toggleLike: (state) => ({ ...state, like: !state.like })\r\n    },\r\n\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { liked, remove, setData, toggleLike } = itemSlice.actions\r\n\r\nexport const getFirstData = state => dispatch => {\r\n    let image = null;\r\n    let text = null;\r\n\r\n    axios({\r\n        method: 'get',\r\n        url: PROXY_URL + getImage // для локального разворота\r\n        // url: getImage\r\n    }).then(responseImage => {\r\n        image = responseImage;\r\n        axios({\r\n            method: 'get',\r\n            url: PROXY_URL + getText // для локального разворота\r\n            // url: getText\r\n        }).then(responseText => {\r\n            text = responseText;\r\n            let result = text.data.map((item, index) => {\r\n                return { ...item, img: image.data[index], isLiked: false }\r\n            })\r\n            dispatch(setData(result))\r\n        })\r\n    })\r\n};\r\n\r\nexport const selectValue = state => state.allData.value;\r\nexport const selectLike = state => state.allData.like;\r\nexport const selectLoading = state => state.allData.loading;\r\n\r\nexport default itemSlice.reducer","import React, { useEffect } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport './App.css';\r\nimport { HeartFill, TrashFill } from 'react-bootstrap-icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { remove, liked, selectValue, selectLike } from './itemSlice';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\n\r\nfunction CardGrid() {\r\n\r\n    const dogs = useSelector(selectValue);\r\n    const dispatch = useDispatch();\r\n    const likeState = useSelector(selectLike);\r\n\r\n    useEffect(() => [dogs]);\r\n\r\n    return (\r\n        <Row xs={1} md={2} lg={4} className=\"g-4\">\r\n            {(dogs && dogs.length > 0) && dogs.map((item, idx) => {\r\n                const cardRender = (\r\n                    <Col key={idx}>\r\n                        <Card className=\"cardContent\">\r\n                            <Card.Img variant=\"top\" src={item.img} className=\"cardImg\" />\r\n                            <div className=\"blockIcons\">\r\n                                <div>\r\n                                    <OverlayTrigger overlay={<Tooltip>Лайк</Tooltip>}>\r\n                                        <HeartFill className={`iconHeart ${item.isLiked && 'liked'}`} onClick={() => dispatch(liked(idx))} />\r\n                                    </OverlayTrigger>\r\n                                </div>\r\n                                <div>\r\n                                    <OverlayTrigger overlay={<Tooltip>Удалить</Tooltip>}><TrashFill className=\"iconDelete\" onClick={() => dispatch(remove(idx))} />\r\n                                    </OverlayTrigger>\r\n                                </div>\r\n                            </div>\r\n                            <Card.Body>\r\n                                <Card.Title className=\"cardTitle\">{item.anime}</Card.Title>\r\n                                <Card.Text className=\"cardText\">{item.quote}</Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                );\r\n                if (likeState) return (item.isLiked && cardRender);\r\n                return cardRender\r\n            })}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default CardGrid;\r\n","import React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport { toggleLike, selectLike } from './itemSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nfunction FilterImage() {\r\n\r\n    const unFilter = \"bg-secondary\";\r\n    const onFilter = \"bg-success\";\r\n\r\n    const likeState = useSelector(selectLike);\r\n    const dispatch = useDispatch();\r\n\r\n    function clickFilter(e) {\r\n        if (!likeState) {\r\n            e.target.classList.remove(unFilter);\r\n            e.target.classList.add(onFilter);\r\n        } else {\r\n            e.target.classList.remove(onFilter);\r\n            e.target.classList.add(unFilter);\r\n        }\r\n        dispatch(toggleLike());\r\n    }\r\n\r\n    return (\r\n        <div className=\"blockFilter\">\r\n            <Badge pill bg=\"secondary\" className=\"badgeFilter\" onClick={clickFilter}>Liked</Badge>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilterImage;","import './App.css';\nimport Container from 'react-bootstrap/Container'\nimport CardGrid from './Card';\nimport FilterImage from './Filter';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { selectLoading } from './itemSlice';\nimport Spinner from 'react-bootstrap/Spinner'\nimport { useSelector } from 'react-redux';\n\n\n\nfunction App() {\n  const loadingData = useSelector(selectLoading);\n  return (\n    <Container>\n\n      {loadingData ?\n        <div className=\"blockSpinner\"><Spinner animation=\"border\" role=\"status\">\n          <span className=\"visually-hidden\">Загрузка...</span>\n        </Spinner>\n        </div> :\n        <>\n          <FilterImage />\n          <CardGrid />\n        </>\n      }\n\n    </Container>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport itemReducer from './itemSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        allData: itemReducer,\r\n    },\r\n})","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport reportWebVitals from './reportWebVitals';\nimport { getFirstData } from './itemSlice';\n\nstore.dispatch(getFirstData());\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}